{"version":3,"sources":["TextInput.jsx","App.js","reportWebVitals.js","index.js"],"names":["TextInput","value","type","onChange","label","name","className","App","useState","patientsList","setPatientsList","patientDetails","setPatientDetails","isEdit","setIsEdit","updateStorage","list","key","moment","format","localStorage","setItem","JSON","stringify","useEffect","getItem","length","parse","error","date","createdDate","map","patient","scan","amount","referedBy","onClick","onDoubleClick","patientData","filter","id","deleteData","e","target","_value","updatedDate","updateData","uuid","push","addData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac1b1501.chunk.js","sourcesContent":["/**\n * @author Praveen Reddy\n * @email pr250210@ncr.com\n * @create date 2021-05-11 19:40:41\n * @modify date 2021-05-11 19:40:41\n * @desc [description]\n */\nimport React from 'react';\n\nfunction TextInput({ value = '', type = 'text', onChange, label, name }) {\n    return (\n        <div className=\"row no-border\">\n            <label className=\"input-label\">{label}</label>\n            <input\n                className=\"input-box\"\n                type={type}\n                value={value}\n                name={name}\n                onChange={onChange}\n            />\n        </div>\n    );\n}\n\nexport default TextInput;\n","/**\n * @author Praveen Reddy\n * @email pr250210@ncr.com\n * @create date 2021-05-11 19:25:30\n * @modify date 2021-05-11 21:20:13\n * @desc [description]\n */\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport uuid from 'react-uuid';\nimport TextInput from './TextInput';\nimport './App.css';\n\nfunction App() {\n    const [patientsList, setPatientsList] = useState([]);\n\n    const [patientDetails, setPatientDetails] = useState({});\n    const [isEdit, setIsEdit] = useState(false);\n\n    const updateData = () => {\n        let list = patientsList.map((patient) => {\n            if (patientDetails.id === patient.id) {\n                return {\n                    ...patientDetails,\n                    updatedDate: moment().format('MM-DD-YYYY'),\n                };\n            }\n            return patient;\n        });\n        updateStorage(list);\n    };\n\n    const addData = () => {\n        patientDetails.id = uuid();\n\n        let value = moment().format('MM-DD-YYYY');\n        if (patientDetails.value) {\n            value = moment(patientDetails.value, 'YYYY-MM-DD').format(\n                'MM-DD-YYYY'\n            );\n        }\n        patientDetails.createdDate = value;\n        patientDetails.updateData = value;\n        let list = [...patientsList];\n        list.push(patientDetails);\n        updateStorage(list);\n    };\n\n    const deleteData = (patientData) => {\n        let list = patientsList.filter(\n            (patient) => patientData.id !== patient.id\n        );\n        updateStorage(list);\n    };\n\n    const updateStorage = (list) => {\n        setPatientsList(list);\n        let key = moment().format('MM-YYYY');\n        localStorage.setItem(key, JSON.stringify(list));\n        setPatientDetails({});\n    };\n\n    useEffect(() => {\n        try {\n            let key = moment().format('MM-YYYY');\n            let list = localStorage.getItem(key);\n            if (list && list.length) setPatientsList(JSON.parse(list));\n        } catch (error) {}\n    }, []);\n\n    let date = moment().format('YYYY-MM-DD');\n\n    if (patientDetails.createdDate) {\n        date = moment(patientDetails.createdDate, 'MM-DD-YYYY').format(\n            'YYYY-MM-DD'\n        );\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <div className=\"list\">\n                    <h2 className=\"heading\">List</h2>\n                    <div className=\"list-container\">\n                        {patientsList.length > 0 ? (\n                            <>\n                                <div className=\"row header\">\n                                    <div className=\"name\">Name</div>\n                                    <div className=\"date\">\n                                        <div>Date </div>\n                                        <div className=\"sub-text\">\n                                            (MM-DD-YYYY)\n                                        </div>\n                                    </div>\n                                    <div className=\"scan\">Scan</div>\n                                    <div className=\"amount\">Amount</div>\n                                    <div className=\"refered\">Refered By</div>\n                                    <div className=\"action\">Actions</div>\n                                </div>\n                                {patientsList.map((patient) => {\n                                    return (\n                                        <div className=\"row details\">\n                                            <div className=\"name\">\n                                                {patient.name}\n                                            </div>\n                                            <div className=\"date\">\n                                                {patient.createdDate}\n                                            </div>\n                                            <div className=\"scan\">\n                                                {patient.scan}\n                                            </div>\n                                            <div className=\"amount\">\n                                                {patient.amount}\n                                            </div>\n                                            <div className=\"refered\">\n                                                {patient.referedBy}\n                                            </div>\n                                            <div className=\"action\">\n                                                <button\n                                                    onClick={() => {\n                                                        setPatientDetails(\n                                                            patient\n                                                        );\n                                                        setIsEdit(true);\n                                                    }}\n                                                >\n                                                    Edit\n                                                </button>\n                                                <button\n                                                    onDoubleClick={() => {\n                                                        deleteData(patient);\n                                                    }}\n                                                >\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </>\n                        ) : (\n                            <div className=\"zero-state\">No Data</div>\n                        )}\n                    </div>\n                </div>\n                <div className=\"form\">\n                    <h2 className=\"heading\">Add Patient</h2>\n                    <div className=\"form-container\">\n                        <TextInput\n                            label=\"Name\"\n                            value={patientDetails.name}\n                            name=\"name\"\n                            onChange={(e) => {\n                                let { name, value } = e.target;\n                                setPatientDetails({\n                                    ...patientDetails,\n                                    [name]: value,\n                                });\n                            }}\n                        />\n                        <TextInput\n                            label=\"Date\"\n                            value={date}\n                            name=\"date\"\n                            onChange={(e) => {\n                                let { name, value } = e.target;\n                                let _value = moment().format('MM-DD-YYYY');\n                                if (value) {\n                                    _value = moment(value, 'YYYY-MM-DD').format(\n                                        'MM-DD-YYYY'\n                                    );\n                                }\n                                setPatientDetails({\n                                    ...patientDetails,\n                                    createdDate: _value,\n                                });\n                            }}\n                            type=\"date\"\n                        />\n                        <TextInput\n                            label=\"Scan\"\n                            value={patientDetails.scan}\n                            name=\"scan\"\n                            onChange={(e) => {\n                                let { name, value } = e.target;\n                                setPatientDetails({\n                                    ...patientDetails,\n                                    [name]: value,\n                                });\n                            }}\n                        />\n                        <TextInput\n                            label=\"Amount\"\n                            value={patientDetails.amount}\n                            name=\"amount\"\n                            onChange={(e) => {\n                                let { name, value } = e.target;\n                                setPatientDetails({\n                                    ...patientDetails,\n                                    [name]: value,\n                                });\n                            }}\n                        />\n                        <TextInput\n                            label=\"Refered By\"\n                            value={patientDetails.referedBy}\n                            name=\"referedBy\"\n                            onChange={(e) => {\n                                let { name, value } = e.target;\n                                setPatientDetails({\n                                    ...patientDetails,\n                                    [name]: value,\n                                });\n                            }}\n                        />\n                        <br />\n                        {isEdit ? (\n                            <button\n                                onClick={() => {\n                                    setIsEdit(false);\n                                    updateData();\n                                }}\n                            >\n                                Update\n                            </button>\n                        ) : (\n                            <button\n                                onClick={() => {\n                                    addData();\n                                }}\n                            >\n                                Add\n                            </button>\n                        )}\n                        <button\n                            onClick={() => {\n                                setPatientDetails({});\n                                setIsEdit(false);\n                            }}\n                        >\n                            Clear\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}